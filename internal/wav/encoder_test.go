/*
 * Copyright (c) 2021 Andreas Signer <asigner@gmail.com>
 *
 * This file is part of gosfxr.
 *
 * gosfxr is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * gosfxr is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gosfxr.  If not, see <http://www.gnu.org/licenses/>.
 */
package wav

import (
	"io/ioutil"
	"math"
	"reflect"
	"testing"
)

func genSine() []float64 {
	// 0.01 second of "a"
	l := int(44100.0 / 100.0)
	buf := make([]float64, l, l)
	for i := 0; i < l; i++ {
		buf[i] = math.Sin(math.Pi / 22050.0 * float64(i) * 440)
	}
	return buf
}

func TestGenerate(t *testing.T) {
	type args struct {
		data func() []float64
		bits int
		freq int
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "Sine wave 440Hz in 44.1k, 16bit",
			args: args{
				data: genSine,
				bits: 16,
				freq: 44100,
			},
			want: []byte{
				82, 73, 70, 70, 150, 3, 0, 0, 87, 65, 86, 69, 102, 109, 116, 32, 16, 0, 0, 0, 1, 0, 1, 0, 68, 172, 0, 0, 136, 88, 1, 0, 2, 0, 16, 0, 100, 97, 116, 97, 114, 3, 0, 0, 0, 0, 4, 8, 1, 16, 238, 23, 194, 31, 119, 39, 4, 47, 97, 54, 136, 61, 113, 68, 22, 75, 110, 81, 117, 87, 36, 93, 117, 98, 99, 103, 233, 107, 3, 112, 172, 115, 225, 118, 158, 121, 225, 123, 167, 125, 238, 126, 183, 127, 254, 127, 197, 127, 12, 127, 210, 125, 26, 124, 230, 121, 54, 119, 15, 116, 115, 112, 102, 108, 236, 103, 10, 99, 196, 93, 31, 88, 34, 82, 210, 75, 54, 69, 85, 62, 52, 55, 221, 47, 85, 40, 164, 32, 211, 24, 233, 16, 237, 8, 233, 0, 229, 248, 231, 240, 248, 232, 32, 225, 103, 217, 214, 209, 114, 202, 69, 195, 84, 188, 168, 181, 70, 175, 54, 169, 125, 163, 33, 158, 39, 153, 149, 148, 111, 144, 185, 140, 119, 137, 172, 134, 91, 132, 135, 130, 48, 129, 90, 128, 3, 128, 46, 128, 217, 128, 4, 130, 173, 131, 212, 133, 117, 136, 143, 139, 30, 143, 30, 147, 140, 151, 99, 156, 158, 161, 56, 167, 44, 173, 114, 179, 6, 186, 224, 192, 249, 199, 75, 207, 206, 214, 122, 222, 72, 230, 48, 238, 42, 246, 46, 254, 50, 6, 49, 14, 34, 22, 253, 29, 186, 37, 80, 45, 185, 52, 237, 59, 229, 66, 154, 73, 4, 80, 30, 86, 225, 91, 72, 97, 77, 102, 236, 106, 30, 111, 225, 114, 49, 118, 9, 121, 104, 123, 75, 125, 175, 126, 148, 127, 249, 127, 222, 127, 65, 127, 37, 126, 137, 124, 113, 122, 221, 119, 209, 116, 79, 113, 92, 109, 250, 104, 47, 100, 255, 94, 111, 89, 134, 83, 72, 77, 189, 70, 235, 63, 216, 56, 140, 49, 15, 42, 103, 34, 156, 26, 183, 18, 191, 10, 188, 2, 183, 250, 183, 242, 196, 234, 230, 226, 38, 219, 138, 211, 28, 204, 225, 196, 226, 189, 38, 183, 179, 176, 143, 170, 194, 164, 80, 159, 63, 154, 149, 149, 86, 145, 134, 141, 42, 138, 68, 135, 215, 132, 230, 130, 115, 129, 127, 128, 12, 128, 25, 128, 167, 128, 181, 129, 65, 131, 76, 133, 210, 135, 208, 138, 69, 142, 44, 146, 129, 150, 65, 155, 101, 160, 234, 165, 202, 171, 254, 177, 129, 184, 75, 191, 87, 198, 157, 205, 21, 213, 185, 220, 128, 228, 98, 236, 89, 244, 91, 252, 96, 4, 97, 12, 86, 20, 55, 28, 251, 35, 155, 43, 15, 51, 79, 58, 85, 65, 26, 72, 150, 78, 194, 84, 154, 90, 22, 96, 50, 101, 232, 105, 52, 110, 16, 114, 122, 117, 110, 120, 233, 122, 232, 124, 105, 126, 108, 127, 238, 127, 239, 127, 112, 127, 113, 126, 242, 124, 246, 122, 126, 120, 141, 117, 38, 114, 75, 110, 2, 106, 79, 101, 53, 96, 187, 90, 229, 84, 186, 78, 64, 72, 126, 65, 121, 58, 57, 51, 198, 43, 39, 36, 100, 28, 132, 20, 144, 12, 142, 4, 138, 252, 135, 244, 145, 236, 173, 228, 230, 220, 65, 213, 200, 205, 129, 198, 116, 191, 168, 184, 35, 178, 237, 171, 11, 166, 132, 160, 93, 155, 156, 150, 68, 146, 90, 142, 227, 138, 226, 135, 89, 133, 76, 131, 188, 129, 171, 128, 27, 128, 11, 128, 123, 128, 108, 129, 220, 130, 202, 132, 52, 135, 24, 138, 114, 141, 63, 145, 123, 149, 35, 154, 49, 159, 161, 164, 108, 170, 142, 176, 255, 182, 186, 189, 184, 196, 241, 203, 94, 211, 249, 218, 184, 226, 150, 234, 136, 242, 136, 250, 141, 2, 144, 10, 137, 18, 110, 26, 58, 34, 227, 41, 97, 49, 174, 56, 194, 63, 150, 70, 35, 77, 98, 83, 78, 89, 224, 94, 18, 100, 223, 104, 67, 109, 58, 113, 190, 116, 205, 119, 99, 122, 127, 124, 29, 126, 60, 127, 219, 127, 250, 127, 152, 127, 182, 126, 84, 125, 116, 123, 24, 121, 66, 118, 246, 114, 53, 111, 5, 107, 105, 102, 103, 97, 2, 92, 65, 86, 41, 80, 192, 73, 13, 67, 23, 60, 228, 52, 124, 45, 230, 37, 43, 30, 80, 22, 96, 14, 97, 6, 92, 254, 89, 246, 94, 238, 118, 230, 167, 222, 250, 214, 118, 207, 35, 200, 8, 193, 45, 186, 152, 179, 79, 173, 90, 167, 190, 161, 128, 156, 167, 151, 55, 147, 52, 143, 162, 139, 134, 136, 226, 133, 184, 131, 12, 130, 222, 128, 48, 128, 3, 128, 86, 128, 42, 129, 125, 130, 79, 132, 157, 134, 101, 137, 164, 140, 88, 144, 123, 148, 11, 153, 3, 158, 92, 163, 20, 169, 34, 175, 130, 181, 45, 188, 28, 195, 72, 202, 170, 209, 59, 217, 243, 224, 202, 232, 184, 240, 182, 248, 186, 0, 191, 8, 186, 16, 165, 24, 119, 32, 40, 40, 177, 47, 10, 55, 44, 62, 15, 69, 173, 75, 254, 81, 253, 87, 164, 93, 236, 98, 209, 103, 77, 108, 93, 112, 252, 115, 37, 119, 215, 121, 15, 124, 202, 125, 6, 127, 194, 127, 254, 127, 186, 127, 244, 126, 176, 125, 236, 123, 172, 121, 242, 118, 192, 115, 26, 112, 3, 108, 127, 103, 147, 98, 68, 93, 151, 87, 146, 81,
			},
		},
		{
			name: "Sine wave 440Hz in 44.1k, 8bit",
			args: args{
				data: genSine,
				bits: 8,
				freq: 44100,
			},
			want: []byte{
				82,73,70,70,221,1,0,0,87,65,86,69,102,109,116,32,16,0,0,0,1,0,1,0,68,172,0,0,68,172,0,0,1,0,8,0,100,97,116,97,185,1,0,0,127,135,143,151,159,166,174,181,188,195,202,208,214,220,225,230,234,239,242,245,248,250,252,253,254,254,254,254,252,251,248,246,243,239,235,231,226,220,215,209,203,196,189,182,175,167,160,152,144,136,128,120,112,104,96,89,81,74,67,60,53,47,41,35,30,25,20,16,12,9,6,4,2,1,0,0,0,0,2,3,5,8,11,15,19,23,28,33,39,44,51,57,64,71,78,86,94,101,109,117,125,133,141,149,157,165,172,180,187,194,200,207,213,219,224,229,234,238,241,245,248,250,252,253,254,254,254,254,253,251,249,246,243,240,236,232,227,222,216,210,204,197,191,184,176,169,161,154,146,138,130,122,114,106,98,90,83,75,68,61,54,48,42,36,31,26,21,17,13,10,7,4,2,1,0,0,0,0,1,3,5,7,10,14,18,22,27,32,37,43,49,56,63,70,77,84,92,100,107,115,123,131,139,147,155,163,170,178,185,192,199,205,211,217,223,228,232,237,241,244,247,249,251,253,254,254,254,254,253,251,249,247,244,241,237,233,228,223,217,212,205,199,192,185,178,171,163,155,147,140,132,124,116,108,100,92,84,77,70,63,56,49,43,37,32,27,22,18,14,10,7,5,3,1,0,0,0,0,1,2,4,7,10,13,17,21,26,31,36,42,48,54,61,68,75,83,90,98,106,114,122,130,138,145,153,161,169,176,183,191,197,204,210,216,222,227,231,236,240,243,246,249,251,253,254,254,254,254,253,252,250,248,245,242,238,234,229,224,219,213,207,200,194,187,180,172,165,157,149,141,133,125,117,109,102,94,86,79,71,64,57,51,45,39,33,28,23,19,15,11,8,5,3,2,0,0,0,0,1,2,4,6,9,12,16,20,24,29,35,40,46,53,59,66,73,81,88,96,104,112,120,128,136,144,152,159,167,175,182,189,196,202,209,215,220,226,230,235,239,243,246,248,251,252,254,254,254,254,253,252,250,248,245,242,239,235,230,225,220,214,208,
			},
		},
		{
			name: "Sine wave 440Hz in 22.05k, 16bit",
			args: args{
				data: genSine,
				bits: 16,
				freq: 22050,
			},
			want: []byte{
				82,73,70,70,220,1,0,0,87,65,86,69,102,109,116,32,16,0,0,0,1,0,1,0,34,86,0,0,68,172,0,0,2,0,16,0,100,97,116,97,184,1,0,0,2,4,247,19,157,35,179,50,253,64,66,78,77,90,236,100,246,109,70,117,191,122,75,126,218,127,104,127,246,124,142,120,65,114,41,106,103,96,32,85,132,72,197,58,25,44,187,28,235,12,231,252,239,236,68,221,36,206,204,191,119,178,89,166,164,155,130,146,24,139,131,133,219,129,47,128,131,128,216,130,37,135,86,141,85,149,1,159,50,170,188,182,109,196,13,211,97,226,45,242,47,2,42,18,219,33,5,49,105,63,207,76,0,89,203,99,5,109,137,116,56,122,253,125,199,127,143,127,87,125,39,121,16,115,43,107,151,97,123,86,3,74,97,60,205,45,129,30,187,14,186,254,189,238,6,223,211,207,98,193,236,179,168,167,200,156,118,147,216,139,13,134,44,130,69,128,96,128,123,130,143,134,139,140,86,148,211,157,218,168,63,181,209,194,89,209,156,224,94,240,93,0,92,16,25,32,85,47,210,61,88,75,174,87,164,98,14,108,197,115,171,121,169,125,173,127,176,127,177,125,186,121,217,115,39,108,194,98,208,87,125,75,251,61,128,47,70,32,138,16,139,0,140,240,201,224,132,209,250,194,101,181,252,168,241,157,112,148,159,140,157,134,132,130,99,128,67,128,36,130,255,133,197,139,93,147,170,156,135,167,199,179,57,193,168,207,217,222,143,238,139,254,140,14,84,30,162,45,56,60,221,73,88,86,121,97,17,107,252,114,24,121,78,125,140,127,201,127,5,126,70,122,156,116,29,109,232,99,33,89,244,76,146,63,48,49,8,34,88,18,94,2,91,242,143,226,56,211,150,196,226,182,85,170,31,159,111,149,107,141,52,135,226,130,135,128,45,128,212,129,118,133,5,139,106,146,135,155,56,166,82,178,164,191,249,205,23,221,193,236,185,252,188,12,142,28,237,43,155,58,94,72,254,84,72,96,15,106,44,114,126,120,236,124,100,127,220,127,82,126,204,122,89,117,14,110,9,101,110,90,
			},
		},
		{
			name: "Sine wave 440Hz in 22.05k, 8bit",
			args: args{
				data: genSine,
				bits: 8,
				freq: 22050,
			},
			want: []byte{
				82,73,70,70,0,1,0,0,87,65,86,69,102,109,116,32,16,0,0,0,1,0,1,0,34,86,0,0,34,86,0,0,1,0,8,0,100,97,116,97,220,0,0,0,131,147,162,178,192,205,217,228,237,244,249,253,254,254,251,247,241,233,223,212,199,186,171,156,140,124,108,92,77,63,50,38,27,18,11,5,1,0,0,2,7,13,21,30,42,54,68,82,97,113,129,145,161,176,190,204,216,226,236,243,249,253,254,254,252,248,242,234,224,213,201,187,173,157,142,126,110,94,79,65,51,39,28,19,11,6,2,0,0,2,6,12,20,29,40,53,66,81,96,111,127,143,159,174,189,202,214,225,235,242,248,252,254,254,252,248,242,235,225,214,202,189,174,159,143,128,112,96,81,66,53,40,29,20,12,6,2,0,0,2,5,11,19,28,39,51,64,79,94,110,126,141,157,172,187,201,213,224,234,242,248,252,254,254,253,249,243,236,227,216,204,190,176,161,145,129,113,98,82,68,54,42,30,21,13,7,2,0,0,1,5,10,18,27,38,50,63,77,92,108,124,140,155,171,185,199,212,223,233,241,247,251,254,254,253,249,244,237,228,217,			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Generate(tt.args.data(), tt.args.bits, tt.args.freq); !reflect.DeepEqual(got, tt.want) {
				ioutil.WriteFile("/tmp/"+tt.name+".wav", got, 0644)
				t.Errorf("Generate() = %v, want %v", got, tt.want)
			}
		})
	}
}
